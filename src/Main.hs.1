{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

import Network.HTTP.Simple (httpBS, getResponseBody)
import qualified Data.Aeson as A
import Data.Time.Clock.POSIX (posixSecondsToUTCTime)
import qualified Graphics.Rendering.Chart.Easy as Chart
import Graphics.Rendering.Chart.Backend.Cairo
import GHC.Generics
import Data.ByteString.Lazy as BL

data CoinData = CoinData {
    prices :: [[Double]]
} deriving Show

instance A.FromJSON CoinData where
    parseJSON = A.withObject "CoinData" $ \v -> CoinData
        <$> v A..: "prices"

main = do
    response <- httpBS "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=30"
    let btcData = A.decode (BL.fromStrict $ getResponseBody response) :: Maybe CoinData
    case btcData of
        Nothing -> putStrLn "Failed to fetch data from CoinGecko API."
        Just coinData -> do
            let priceData = prices coinData
            let timeSeries = [(posixSecondsToUTCTime $ realToFrac (timestamp / 1000), price) | [timestamp, price] <- priceData]

            toFile Chart.def "bitcoin_price_chart.png" $ do
                Chart.layout_title Chart..= "Bitcoin Price Chart"
                Chart.plot (Chart.line "BTC Price" [timeSeries])
